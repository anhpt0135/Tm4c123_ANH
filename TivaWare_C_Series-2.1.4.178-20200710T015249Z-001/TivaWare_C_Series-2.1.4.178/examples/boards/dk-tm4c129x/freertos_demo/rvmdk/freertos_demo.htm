<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\freertos_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\freertos_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Jul 01 07:04:59 2020
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[38]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3d]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">SysCtlDelay</a><BR>
 <LI><a href="#[5c]">EMACPHYWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">EMACPHYWrite</a><BR>
 <LI><a href="#[5b]">EMACPHYRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">EMACPHYRead</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
 <LI><a href="#[2d]">prvIdleTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">prvIdleTask</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ControlTask</a> from spider_task.o(i.ControlTask) referenced from spider_task.o(i.SpiderTaskInit)
 <LI><a href="#[a]">ControlTouchCallback</a> from spider_task.o(i.ControlTouchCallback) referenced from spider_task.o(i.ControlTask)
 <LI><a href="#[c]">DisplayTask</a> from display_task.o(i.DisplayTask) referenced from display_task.o(i.DisplayTaskInit)
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">GrDefaultStringRenderer</a> from string.o(i.GrDefaultStringRenderer) referenced from context.o(i.GrContextInit)
 <LI><a href="#[37]">GrMapISO8859_1_Unicode</a> from charmap.o(i.GrMapISO8859_1_Unicode) referenced 2 times from context.o(.constdata)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 111 times from startup_rvmdk.o(RESET)
 <LI><a href="#[33]">Kentec320x240x16_SSD2119ColorTranslate</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119ColorTranslate) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[34]">Kentec320x240x16_SSD2119Flush</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119Flush) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[30]">Kentec320x240x16_SSD2119LineDrawH</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119LineDrawH) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[31]">Kentec320x240x16_SSD2119LineDrawV</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119LineDrawV) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[2e]">Kentec320x240x16_SSD2119PixelDraw</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119PixelDraw) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[2f]">Kentec320x240x16_SSD2119PixelDrawMultiple</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119PixelDrawMultiple) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[32]">Kentec320x240x16_SSD2119RectFill</a> from kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119RectFill) referenced from kentec320x240x16_ssd2119.o(.constdata)
 <LI><a href="#[e]">LEDTask</a> from led_task.o(i.LEDTask) referenced from led_task.o(i.LEDTaskInit)
 <LI><a href="#[f]">LocatorReceive</a> from locator.o(i.LocatorReceive) referenced from locator.o(i.LocatorInit)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">SSIHandler</a> from lwip_task.o(i.SSIHandler) referenced from lwip_task.o(i.SetupServices)
 <LI><a href="#[21]">SetupServices</a> from lwip_task.o(i.SetupServices) referenced from lwip_task.o(i.lwIPTaskInit)
 <LI><a href="#[36]">SpiderSpeedCGIHandler</a> from lwip_task.o(i.SpiderSpeedCGIHandler) referenced from lwip_task.o(.constdata)
 <LI><a href="#[b]">SpiderTask</a> from spider_task.o(i.SpiderTask) referenced from spider_task.o(i.CreateSpider)
 <LI><a href="#[35]">ToggleRateCGIHandler</a> from lwip_task.o(i.ToggleRateCGIHandler) referenced from lwip_task.o(.constdata)
 <LI><a href="#[7]">TouchScreenIntHandler</a> from touch.o(i.TouchScreenIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">arp_timer</a> from lwiplib.o(i.arp_timer) referenced from lwiplib.o(i.arp_timer)
 <LI><a href="#[12]">arp_timer</a> from lwiplib.o(i.arp_timer) referenced from lwiplib.o(i.sys_timeouts_init)
 <LI><a href="#[13]">autoip_timer</a> from lwiplib.o(i.autoip_timer) referenced from lwiplib.o(i.autoip_timer)
 <LI><a href="#[13]">autoip_timer</a> from lwiplib.o(i.autoip_timer) referenced from lwiplib.o(i.sys_timeouts_init)
 <LI><a href="#[14]">dhcp_recv</a> from lwiplib.o(i.dhcp_recv) referenced from lwiplib.o(i.dhcp_start)
 <LI><a href="#[15]">dhcp_timer_coarse</a> from lwiplib.o(i.dhcp_timer_coarse) referenced from lwiplib.o(i.dhcp_timer_coarse)
 <LI><a href="#[15]">dhcp_timer_coarse</a> from lwiplib.o(i.dhcp_timer_coarse) referenced from lwiplib.o(i.sys_timeouts_init)
 <LI><a href="#[16]">dhcp_timer_fine</a> from lwiplib.o(i.dhcp_timer_fine) referenced from lwiplib.o(i.dhcp_timer_fine)
 <LI><a href="#[16]">dhcp_timer_fine</a> from lwiplib.o(i.dhcp_timer_fine) referenced from lwiplib.o(i.sys_timeouts_init)
 <LI><a href="#[29]">etharp_output</a> from lwiplib.o(i.etharp_output) referenced from lwiplib.o(i.tivaif_init)
 <LI><a href="#[1b]">http_accept</a> from httpd.o(i.http_accept) referenced from httpd.o(i.httpd_init)
 <LI><a href="#[18]">http_err</a> from httpd.o(i.http_err) referenced from httpd.o(i.http_accept)
 <LI><a href="#[19]">http_poll</a> from httpd.o(i.http_poll) referenced from httpd.o(i.http_accept)
 <LI><a href="#[19]">http_poll</a> from httpd.o(i.http_poll) referenced from httpd.o(i.http_close_conn)
 <LI><a href="#[17]">http_recv</a> from httpd.o(i.http_recv) referenced from httpd.o(i.http_accept)
 <LI><a href="#[1a]">http_sent</a> from httpd.o(i.http_sent) referenced from httpd.o(i.http_accept)
 <LI><a href="#[8]">lwIPEthernetIntHandler</a> from lwiplib.o(i.lwIPEthernetIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1d]">lwIPInterruptTask</a> from lwiplib.o(i.lwIPInterruptTask) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[1c]">lwIPPrivateInit</a> from lwiplib.o(i.lwIPPrivateInit) referenced from lwiplib.o(i.lwIPInit)
 <LI><a href="#[20]">lwIPPrivateLinkTimer</a> from lwiplib.o(i.lwIPPrivateLinkTimer) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[20]">lwIPPrivateLinkTimer</a> from lwiplib.o(i.lwIPPrivateLinkTimer) referenced from lwiplib.o(i.lwIPPrivateLinkTimer)
 <LI><a href="#[9]">main</a> from freertos_demo.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2c]">netif_set_link_down</a> from lwiplib.o(i.netif_set_link_down) referenced from lwiplib.o(i.tivaif_process_phy_interrupt)
 <LI><a href="#[2b]">netif_set_link_up</a> from lwiplib.o(i.netif_set_link_up) referenced from lwiplib.o(i.tivaif_process_phy_interrupt)
 <LI><a href="#[22]">pbuf_free_ooseq_callback</a> from lwiplib.o(i.pbuf_free_ooseq_callback) referenced from lwiplib.o(i.pbuf_pool_is_empty)
 <LI><a href="#[2d]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[23]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[24]">sys_arch_thread</a> from lwiplib.o(i.sys_arch_thread) referenced from lwiplib.o(i.sys_thread_new)
 <LI><a href="#[26]">tcp_accept_null</a> from lwiplib.o(i.tcp_accept_null) referenced from lwiplib.o(i.tcp_listen_with_backlog)
 <LI><a href="#[25]">tcp_recv_null</a> from lwiplib.o(i.tcp_recv_null) referenced from lwiplib.o(i.tcp_alloc)
 <LI><a href="#[1e]">tcpip_input</a> from lwiplib.o(i.tcpip_input) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[27]">tcpip_tcp_timer</a> from lwiplib.o(i.tcpip_tcp_timer) referenced from lwiplib.o(i.tcp_timer_needed)
 <LI><a href="#[27]">tcpip_tcp_timer</a> from lwiplib.o(i.tcpip_tcp_timer) referenced from lwiplib.o(i.tcpip_tcp_timer)
 <LI><a href="#[28]">tcpip_thread</a> from lwiplib.o(i.tcpip_thread) referenced from lwiplib.o(i.tcpip_init)
 <LI><a href="#[1f]">tivaif_init</a> from lwiplib.o(i.tivaif_init) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[2a]">tivaif_transmit</a> from lwiplib.o(i.tivaif_transmit) referenced from lwiplib.o(i.tivaif_init)
 <LI><a href="#[4]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[18b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[190]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[181]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[5]"></a>xPortPendSVHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYConfigSet
</UL>

<P><STRONG><a name="[192]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[193]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[72]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[194]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[195]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[196]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e6]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>

<P><STRONG><a name="[de]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
</UL>

<P><STRONG><a name="[e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
</UL>

<P><STRONG><a name="[5e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCGIParameter
</UL>

<P><STRONG><a name="[a1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[e2]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>CheckDecimalParam</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, cgifuncs.o(i.CheckDecimalParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckDecimalParam
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCGIParam
</UL>

<P><STRONG><a name="[4a]"></a>DisplayDraw</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, display_task.o(i.DisplayDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayDraw &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[4e]"></a>DisplayImage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display_task.o(i.DisplayImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayImage &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[4f]"></a>DisplayMove</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, display_task.o(i.DisplayMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayMove &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[4d]"></a>DisplayString</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display_task.o(i.DisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DisplayString &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayValue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIP
</UL>

<P><STRONG><a name="[55]"></a>DisplayTaskInit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, display_task.o(i.DisplayTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DisplayTaskInit &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>EMACAddrGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, emac.o(i.EMACAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[173]"></a>EMACConfigGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, emac.o(i.EMACConfigGet))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_phy_interrupt
</UL>

<P><STRONG><a name="[174]"></a>EMACConfigSet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, emac.o(i.EMACConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EMACConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_phy_interrupt
</UL>

<P><STRONG><a name="[16a]"></a>EMACFrameFilterSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, emac.o(i.EMACFrameFilterSet))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[111]"></a>EMACInit</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, emac.o(i.EMACInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMACInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[16b]"></a>EMACIntClear</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, emac.o(i.EMACIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[16e]"></a>EMACIntEnable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, emac.o(i.EMACIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[10d]"></a>EMACIntStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, emac.o(i.EMACIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[58]"></a>EMACPHYConfigSet</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, emac.o(i.EMACPHYConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EMACPHYConfigSet &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[5b]"></a>EMACPHYRead</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emac.o(i.EMACPHYRead))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYRead
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYRead
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_phy_interrupt
</UL>

<P><STRONG><a name="[5c]"></a>EMACPHYWrite</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emac.o(i.EMACPHYWrite))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYWrite
</UL>

<P><STRONG><a name="[10e]"></a>EMACPowerManagementStatusGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac.o(i.EMACPowerManagementStatusGet))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[6f]"></a>EMACRxDMADescriptorListSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac.o(i.EMACRxDMADescriptorListSet))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDMADescriptors
</UL>

<P><STRONG><a name="[16d]"></a>EMACRxEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, emac.o(i.EMACRxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[10f]"></a>EMACTimestampIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac.o(i.EMACTimestampIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[70]"></a>EMACTxDMADescriptorListSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, emac.o(i.EMACTxDMADescriptorListSet))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDMADescriptors
</UL>

<P><STRONG><a name="[175]"></a>EMACTxDMAPollDemand</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emac.o(i.EMACTxDMAPollDemand))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
</UL>

<P><STRONG><a name="[16c]"></a>EMACTxEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, emac.o(i.EMACTxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[5d]"></a>FindCGIParameter</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cgifuncs.o(i.FindCGIParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FindCGIParameter &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCGIParam
</UL>

<P><STRONG><a name="[5f]"></a>FrameDraw</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, frame.o(i.FrameDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FrameDraw &rArr; GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontBaselineGet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextClipRegionSet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrImageDraw
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLCD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>

<P><STRONG><a name="[65]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLCD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>

<P><STRONG><a name="[63]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeEthernetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeEthernetLED &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[66]"></a>GPIOPinTypeLCD</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeLCD &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[76]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[67]"></a>GetCGIParam</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cgifuncs.o(i.GetCGIParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCGIParam &rArr; FindCGIParameter &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCGIParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDecimalParam
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleRateCGIHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderSpeedCGIHandler
</UL>

<P><STRONG><a name="[60]"></a>GrContextClipRegionSet</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, context.o(i.GrContextClipRegionSet))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
</UL>

<P><STRONG><a name="[51]"></a>GrContextFontSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, string.o(i.GrContextFontSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrContextFontSet &rArr; UpdateContextCharMapping
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateContextCharMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[50]"></a>GrContextInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, context.o(i.GrContextInit))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[d]"></a>GrDefaultStringRenderer</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, string.o(i.GrDefaultStringRenderer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GrDefaultStringRenderer &rArr; GrFontGlyphRender
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphRender
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphDataGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> context.o(i.GrContextInit)
</UL>
<P><STRONG><a name="[61]"></a>GrFontBaselineGet</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, string.o(i.GrFontBaselineGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GrFontBaselineGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
</UL>

<P><STRONG><a name="[6a]"></a>GrFontGlyphDataGet</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, string.o(i.GrFontGlyphDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrFontGlyphDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDefaultStringRenderer
</UL>

<P><STRONG><a name="[6b]"></a>GrFontGlyphRender</STRONG> (Thumb, 646 bytes, Stack size 64 bytes, string.o(i.GrFontGlyphRender))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GrFontGlyphRender
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrDefaultStringRenderer
</UL>

<P><STRONG><a name="[53]"></a>GrImageDraw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, image.o(i.GrImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalImageDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[52]"></a>GrLineDraw</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, line.o(i.GrLineDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GrLineDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[37]"></a>GrMapISO8859_1_Unicode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, charmap.o(i.GrMapISO8859_1_Unicode))
<BR>[Address Reference Count : 1]<UL><LI> context.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>GrStringDraw</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, string.o(i.GrStringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrStringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
</UL>

<P><STRONG><a name="[62]"></a>GrStringWidthGet</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, string.o(i.GrStringWidthGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontGlyphDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
</UL>

<P><STRONG><a name="[6d]"></a>InitDMADescriptors</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lwiplib.o(i.InitDMADescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = InitDMADescriptors &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxDMADescriptorListSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxDMADescriptorListSet
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[16f]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[71]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>

<P><STRONG><a name="[44]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[74]"></a>Kentec320x240x16_SSD2119Init</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Kentec320x240x16_SSD2119Init &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDModeSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIDDTimingSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIDDConfigSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDMAConfigSet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>LCDDMAConfigSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(i.LCDDMAConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[9a]"></a>LCDIDDCommandWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(i.LCDIDDCommandWrite))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>

<P><STRONG><a name="[79]"></a>LCDIDDConfigSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(i.LCDIDDConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[9b]"></a>LCDIDDDataWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(i.LCDIDDDataWrite))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>

<P><STRONG><a name="[7a]"></a>LCDIDDTimingSet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcd.o(i.LCDIDDTimingSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[77]"></a>LCDModeSet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd.o(i.LCDModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[7f]"></a>LEDTaskInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, led_task.o(i.LEDTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LEDTaskInit &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>LocatorAppTitleSet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, locator.o(i.LocatorAppTitleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LocatorAppTitleSet
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[80]"></a>LocatorInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, locator.o(i.LocatorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LocatorInit &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[89]"></a>LocatorMACAddrSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, locator.o(i.LocatorMACAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[86]"></a>PinoutSet</STRONG> (Thumb, 880 bytes, Stack size 24 bytes, pinout.o(i.PinoutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PinoutSet &rArr; GPIOPinTypeLCD &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLCD
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>RandomAddEntropy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, random.o(i.RandomAddEntropy))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[91]"></a>RandomNumber</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, random.o(i.RandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[90]"></a>RandomSeed</STRONG> (Thumb, 332 bytes, Stack size 28 bytes, random.o(i.RandomSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RandomSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[21]"></a>SetupServices</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lwip_task.o(i.SetupServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SetupServices &rArr; httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_ssi_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_set_cgi_handlers
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLocalMACGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorMACAddrSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorAppTitleSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_task.o(i.lwIPTaskInit)
</UL>
<P><STRONG><a name="[8e]"></a>SpiderSpeedSet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spider_task.o(i.SpiderSpeedSet))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTaskInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderSpeedCGIHandler
</UL>

<P><STRONG><a name="[97]"></a>SpiderTaskInit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, spider_task.o(i.SpiderTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SpiderTaskInit &rArr; CreateSpider &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderSpeedSet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSpider
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 706 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockFreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>SysCtlMOSCConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlMOSCConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[5a]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralReady))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYConfigSet
</UL>

<P><STRONG><a name="[59]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYConfigSet
</UL>

<P><STRONG><a name="[98]"></a>TimerControlTrigger</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, timer.o(i.TimerControlTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenInit
</UL>

<P><STRONG><a name="[43]"></a>TouchScreenCallbackSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touch.o(i.TouchScreenCallbackSet))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[42]"></a>TouchScreenInit</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, touch.o(i.TouchScreenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TouchScreenInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[7]"></a>TouchScreenIntHandler</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, touch.o(i.TouchScreenIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TouchScreenIntHandler &rArr; TouchScreenDebouncer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenDebouncer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a0]"></a>autoip_arp_reply</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_restart
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[a3]"></a>autoip_network_changed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = autoip_network_changed &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start_probing
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[a6]"></a>autoip_start</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = autoip_start &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start_probing
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_restart
</UL>

<P><STRONG><a name="[a8]"></a>autoip_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = autoip_stop &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[a9]"></a>autoip_tmr</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lwiplib.o(i.autoip_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = autoip_tmr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_timer
</UL>

<P><STRONG><a name="[ae]"></a>dhcp_arp_reply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[b4]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[c1]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[c3]"></a>dhcp_network_changed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[ca]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[b6]"></a>dhcp_renew</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[cb]"></a>dhcp_start</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
</UL>

<P><STRONG><a name="[ce]"></a>dhcp_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dhcp_stop &rArr; autoip_stop &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[d1]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[29]"></a>etharp_output</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, lwiplib.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tivaif_init)
</UL>
<P><STRONG><a name="[b3]"></a>etharp_query</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, lwiplib.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[9f]"></a>etharp_raw</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lwiplib.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[d8]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[9c]"></a>etharp_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[db]"></a>ethernet_input</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lwiplib.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[fb]"></a>fs_bytes_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs.o(i.fs_bytes_left))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[df]"></a>fs_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs.o(i.fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fs_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>

<P><STRONG><a name="[e1]"></a>fs_open</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_open &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[e3]"></a>fs_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[8d]"></a>http_set_cgi_handlers</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, httpd.o(i.http_set_cgi_handlers))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[8c]"></a>http_set_ssi_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd.o(i.http_set_ssi_handler))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[8b]"></a>httpd_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, httpd.o(i.httpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[101]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[103]"></a>icmp_input</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lwiplib.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[106]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwiplib.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[104]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwiplib.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[d5]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwiplib.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[dc]"></a>ip_input</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, lwiplib.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[107]"></a>ip_output</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[105]"></a>ip_output_if</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[10c]"></a>ip_route</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lwiplib.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[8]"></a>lwIPEthernetIntHandler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwiplib.o(i.lwIPEthernetIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwIPEthernetIntHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTimestampIntStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPowerManagementStatusGet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>lwIPInit</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, lwiplib.o(i.lwIPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYConfigSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPTaskInit
</UL>

<P><STRONG><a name="[179]"></a>lwIPLocalIPAddrGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.lwIPLocalIPAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[88]"></a>lwIPLocalMACGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.lwIPLocalMACGet))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[117]"></a>lwIPTaskInit</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwip_task.o(i.lwIPTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwIPTaskInit &rArr; lwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>lwip_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwiplib.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_init &rArr; mem_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, freertos_demo.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; lwIPTaskInit &rArr; lwIPInit &rArr; tcpip_init &rArr; sys_thread_new &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPTaskInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlMOSCConfigSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTaskInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontBaselineGet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameDraw
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e0]"></a>mem_free</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lwiplib.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_thread
</UL>

<P><STRONG><a name="[11b]"></a>mem_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwiplib.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem_init &rArr; sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[a7]"></a>mem_malloc</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lwiplib.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[125]"></a>mem_trim</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, lwiplib.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mem_trim &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[126]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwiplib.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[11c]"></a>memp_init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lwiplib.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[127]"></a>memp_malloc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwiplib.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>

<P><STRONG><a name="[116]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwiplib.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[115]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[a4]"></a>netif_set_down</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_network_changed
</UL>

<P><STRONG><a name="[ac]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[aa]"></a>netif_set_ipaddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lwiplib.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[2c]"></a>netif_set_link_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_link_down))
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tivaif_process_phy_interrupt)
</UL>
<P><STRONG><a name="[2b]"></a>netif_set_link_up</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwiplib.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_network_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tivaif_process_phy_interrupt)
</UL>
<P><STRONG><a name="[ab]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[ad]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[6e]"></a>pbuf_alloc</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDMADescriptors
</UL>

<P><STRONG><a name="[12b]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_receive
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[12a]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_chain &rArr; pbuf_ref
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[151]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[d9]"></a>pbuf_copy</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[c7]"></a>pbuf_copy_partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[84]"></a>pbuf_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_receive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_transmit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[d4]"></a>pbuf_header</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[bc]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pbuf_realloc &rArr; mem_trim &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[da]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_ref
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[13b]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[185]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[109]"></a>raw_input</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lwiplib.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[13c]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lwiplib.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[121]"></a>sys_arch_sem_wait</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwiplib.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[11a]"></a>sys_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lwiplib.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[13d]"></a>sys_mbox_new</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lwiplib.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_mbox_new &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[13e]"></a>sys_mbox_post</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lwiplib.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[13f]"></a>sys_mbox_trypost</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwiplib.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[167]"></a>sys_mbox_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwiplib.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[124]"></a>sys_sem_new</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lwiplib.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_sem_new &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[123]"></a>sys_sem_signal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lwiplib.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_sem_signal &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[140]"></a>sys_thread_new</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, lwiplib.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sys_thread_new &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[9d]"></a>sys_timeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwiplib.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateLinkTimer
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_timer
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[11d]"></a>sys_timeouts_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwiplib.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[141]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lwiplib.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[142]"></a>sys_untimeout</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwiplib.o(i.sys_untimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_untimeout &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[143]"></a>tcp_abandon</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[128]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[100]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[146]"></a>tcp_alloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[ea]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[fe]"></a>tcp_bind</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[f1]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[14f]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[150]"></a>tcp_enqueue_flags</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[ec]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[152]"></a>tcp_fasttmr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[10b]"></a>tcp_input</STRONG> (Thumb, 800 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[157]"></a>tcp_keepalive</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[ff]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[fd]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[147]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[f8]"></a>tcp_output</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[14b]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[144]"></a>tcp_pcb_remove</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[ed]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[153]"></a>tcp_process_refused_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[eb]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[25]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[f9]"></a>tcp_recved</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[15f]"></a>tcp_rexmit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[160]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[163]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[145]"></a>tcp_rst</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[162]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[14e]"></a>tcp_seg_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[12c]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[15b]"></a>tcp_send_empty_ack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[14c]"></a>tcp_send_fin</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_send_fin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[ee]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[e9]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_setprio))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[164]"></a>tcp_slowtmr</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[149]"></a>tcp_timer_needed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[166]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[161]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[fc]"></a>tcp_write</STRONG> (Thumb, 752 bytes, Stack size 96 bytes, lwiplib.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
</UL>

<P><STRONG><a name="[165]"></a>tcp_zero_window_probe</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[118]"></a>tcpip_callback_with_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwiplib.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPTaskInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_phy_interrupt
</UL>

<P><STRONG><a name="[112]"></a>tcpip_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwiplib.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[1e]"></a>tcpip_input</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lwiplib.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[1f]"></a>tivaif_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwiplib.o(i.tivaif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tivaif_init &rArr; tivaif_hwinit &rArr; InitDMADescriptors &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_hwinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[113]"></a>tivaif_interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lwiplib.o(i.tivaif_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tivaif_interrupt &rArr; tivaif_receive &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_receive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_transmit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_process_phy_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInterruptTask
</UL>

<P><STRONG><a name="[170]"></a>tivaif_process_phy_interrupt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lwiplib.o(i.tivaif_process_phy_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tivaif_process_phy_interrupt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACConfigSet
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACConfigGet
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_interrupt
</UL>

<P><STRONG><a name="[83]"></a>udp_bind</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lwiplib.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[cd]"></a>udp_connect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lwiplib.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[10a]"></a>udp_input</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, lwiplib.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[81]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwiplib.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[82]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorInit
</UL>

<P><STRONG><a name="[cc]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwiplib.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[85]"></a>udp_sendto</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lwiplib.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocatorReceive
</UL>

<P><STRONG><a name="[bd]"></a>udp_sendto_if</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, lwiplib.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[87]"></a>usnprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ustdlib.o(i.usnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usnprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIHandler
</UL>

<P><STRONG><a name="[177]"></a>ustrncpy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ustdlib.o(i.ustrncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uvsnprintf
</UL>

<P><STRONG><a name="[176]"></a>uvsnprintf</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, ustdlib.o(i.uvsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ustrncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>

<P><STRONG><a name="[132]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[178]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[137]"></a>vApplicationIdleHook</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, idle_task.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vApplicationIdleHook &rArr; DisplayValue &rArr; DisplayString &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLocalIPAddrGet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayValue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayIP
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMove
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[17a]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, freertos_demo.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vApplicationStackOverflowHook &rArr; GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrFontBaselineGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[188]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[189]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[12e]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[17b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[92]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[96]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_transmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[133]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[180]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[94]"></a>vTaskDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[7e]"></a>vTaskDelayUntil</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTask
</UL>

<P><STRONG><a name="[95]"></a>vTaskDelete</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_thread
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[13a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[17d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[17e]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[186]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[120]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[3c]"></a>vTaskSwitchContext</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; GrStringWidthGet &rArr; GrFontGlyphDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[17f]"></a>xPortStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[6]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTaskInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[45]"></a>xQueueGenericReceive</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTask
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInterruptTask
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[184]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4b]"></a>xQueueGenericSend</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMove
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayDraw
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[48]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTouchCallback
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[187]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[49]"></a>xTaskGenericCreate</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTaskInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTaskInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSpider
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>

<P><STRONG><a name="[7d]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTask
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[183]"></a>xTaskIncrementTick</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[136]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[139]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[131]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c]"></a>DisplayTask</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, display_task.o(i.DisplayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DisplayTask &rArr; GrImageDraw &rArr; InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLineDraw
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrImageDraw
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display_task.o(i.DisplayTaskInit)
</UL>
<P><STRONG><a name="[dd]"></a>extract_uri_parameters</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, httpd.o(i.extract_uri_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extract_uri_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[e5]"></a>get_http_headers</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, httpd.o(i.get_http_headers))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_http_headers &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
</UL>

<P><STRONG><a name="[e7]"></a>get_tag_insert</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, httpd.o(i.get_tag_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_tag_insert &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[1b]"></a>http_accept</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, httpd.o(i.http_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = http_accept &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.httpd_init)
</UL>
<P><STRONG><a name="[ef]"></a>http_close_conn</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, httpd.o(i.http_close_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = http_close_conn &rArr; http_state_free &rArr; fs_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[18]"></a>http_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, httpd.o(i.http_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_err &rArr; http_state_free &rArr; fs_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_state_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[f2]"></a>http_find_file</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, httpd.o(i.http_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = http_find_file &rArr; http_get_404_file &rArr; fs_open &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_404_file
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_uri_parameters
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
</UL>

<P><STRONG><a name="[f3]"></a>http_get_404_file</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, httpd.o(i.http_get_404_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = http_get_404_file &rArr; fs_open &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[f4]"></a>http_init_file</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, httpd.o(i.http_init_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = http_init_file &rArr; get_http_headers &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
</UL>

<P><STRONG><a name="[f6]"></a>http_parse_request</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, httpd.o(i.http_parse_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = http_parse_request &rArr; http_find_file &rArr; http_get_404_file &rArr; fs_open &rArr; mem_malloc &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_find_file
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[19]"></a>http_poll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, httpd.o(i.http_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = http_poll &rArr; http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Address Reference Count : 2]<UL><LI> httpd.o(i.http_accept)
<LI> httpd.o(i.http_close_conn)
</UL>
<P><STRONG><a name="[17]"></a>http_recv</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, httpd.o(i.http_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = http_recv &rArr; http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[f7]"></a>http_send_data</STRONG> (Thumb, 1128 bytes, Stack size 48 bytes, httpd.o(i.http_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tag_insert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_bytes_left
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_poll
</UL>

<P><STRONG><a name="[1a]"></a>http_sent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, httpd.o(i.http_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = http_sent &rArr; http_send_data &rArr; http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> httpd.o(i.http_accept)
</UL>
<P><STRONG><a name="[f0]"></a>http_state_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, httpd.o(i.http_state_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = http_state_free &rArr; fs_close &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_err
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_close_conn
</UL>

<P><STRONG><a name="[fa]"></a>http_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, httpd.o(i.http_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = http_write &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_send_data
</UL>

<P><STRONG><a name="[f5]"></a>strnstr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, httpd.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strnstr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_parse_request
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_init_file
</UL>

<P><STRONG><a name="[4c]"></a>DisplayIP</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, idle_task.o(i.DisplayIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DisplayIP &rArr; DisplayString &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[57]"></a>DisplayValue</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, idle_task.o(i.DisplayValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DisplayValue &rArr; DisplayString &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayString
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>

<P><STRONG><a name="[33]"></a>Kentec320x240x16_SSD2119ColorTranslate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119ColorTranslate))
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>Kentec320x240x16_SSD2119Flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119Flush))
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>Kentec320x240x16_SSD2119LineDrawH</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119LineDrawH))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kentec320x240x16_SSD2119LineDrawH &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>Kentec320x240x16_SSD2119LineDrawV</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119LineDrawV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kentec320x240x16_SSD2119LineDrawV &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>Kentec320x240x16_SSD2119PixelDraw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119PixelDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Kentec320x240x16_SSD2119PixelDraw &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>Kentec320x240x16_SSD2119PixelDrawMultiple</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119PixelDrawMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Kentec320x240x16_SSD2119PixelDrawMultiple &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>Kentec320x240x16_SSD2119RectFill</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, kentec320x240x16_ssd2119.o(i.Kentec320x240x16_SSD2119RectFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Kentec320x240x16_SSD2119RectFill &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kentec320x240x16_ssd2119.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>WriteCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, kentec320x240x16_ssd2119.o(i.WriteCommand))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIDDCommandWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119RectFill
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119PixelDrawMultiple
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119PixelDraw
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119LineDrawV
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119LineDrawH
</UL>

<P><STRONG><a name="[7c]"></a>WriteData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kentec320x240x16_ssd2119.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDIDDDataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119RectFill
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119PixelDrawMultiple
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119PixelDraw
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119LineDrawV
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kentec320x240x16_SSD2119LineDrawH
</UL>

<P><STRONG><a name="[e]"></a>LEDTask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, led_task.o(i.LEDTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEDTask &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_task.o(i.LEDTaskInit)
</UL>
<P><STRONG><a name="[f]"></a>LocatorReceive</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, locator.o(i.LocatorReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LocatorReceive &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locator.o(i.LocatorInit)
</UL>
<P><STRONG><a name="[10]"></a>SSIHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwip_task.o(i.SSIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SSIHandler &rArr; usnprintf &rArr; uvsnprintf &rArr; ustrncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_task.o(i.SetupServices)
</UL>
<P><STRONG><a name="[36]"></a>SpiderSpeedCGIHandler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwip_task.o(i.SpiderSpeedCGIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SpiderSpeedCGIHandler &rArr; GetCGIParam &rArr; FindCGIParameter &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCGIParam
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderSpeedSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_task.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>ToggleRateCGIHandler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lwip_task.o(i.ToggleRateCGIHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ToggleRateCGIHandler &rArr; GetCGIParam &rArr; FindCGIParameter &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCGIParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip_task.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>arp_timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwiplib.o(i.arp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.arp_timer)
<LI> lwiplib.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[9e]"></a>autoip_arp_announce</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_arp_announce))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[a2]"></a>autoip_restart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwiplib.o(i.autoip_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = autoip_restart &rArr; autoip_start &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[a5]"></a>autoip_start_probing</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_start_probing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = autoip_start_probing
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_network_changed
</UL>

<P><STRONG><a name="[13]"></a>autoip_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = autoip_timer &rArr; autoip_tmr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.autoip_timer)
<LI> lwiplib.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[b0]"></a>dhcp_bind</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lwiplib.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b2]"></a>dhcp_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b7]"></a>dhcp_create_msg</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[af]"></a>dhcp_decline</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[be]"></a>dhcp_delete_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[bf]"></a>dhcp_discover</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[c8]"></a>dhcp_handle_ack</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b8]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[b9]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[ba]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[c0]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[bb]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[c5]"></a>dhcp_parse_reply</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, lwiplib.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b5]"></a>dhcp_rebind</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[c4]"></a>dhcp_reboot</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[14]"></a>dhcp_recv</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[c9]"></a>dhcp_select</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[b1]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[c2]"></a>dhcp_timeout</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[15]"></a>dhcp_timer_coarse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_timer_coarse))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.dhcp_timer_coarse)
<LI> lwiplib.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[16]"></a>dhcp_timer_fine</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_timer_fine))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.dhcp_timer_fine)
<LI> lwiplib.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[cf]"></a>etharp_arp_input</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, lwiplib.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = etharp_arp_input &rArr; autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[d3]"></a>etharp_find_entry</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lwiplib.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[d2]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[d7]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[d6]"></a>etharp_send_ip</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwiplib.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[d0]"></a>etharp_update_arp_entry</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[102]"></a>icmp_send_response</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lwiplib.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[1d]"></a>lwIPInterruptTask</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lwiplib.o(i.lwIPInterruptTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lwIPInterruptTask &rArr; tivaif_interrupt &rArr; tivaif_receive &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[114]"></a>lwIPLinkDetect</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lwiplib.o(i.lwIPLinkDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lwIPLinkDetect &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateLinkTimer
</UL>

<P><STRONG><a name="[1c]"></a>lwIPPrivateInit</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lwiplib.o(i.lwIPPrivateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPInit)
</UL>
<P><STRONG><a name="[20]"></a>lwIPPrivateLinkTimer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwiplib.o(i.lwIPPrivateLinkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lwIPPrivateLinkTimer &rArr; lwIPLinkDetect &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPLinkDetect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
<LI> lwiplib.o(i.lwIPPrivateLinkTimer)
</UL>
<P><STRONG><a name="[108]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lwiplib.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[22]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[129]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[122]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lwiplib.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[24]"></a>sys_arch_thread</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwiplib.o(i.sys_arch_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sys_arch_thread &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.sys_thread_new)
</UL>
<P><STRONG><a name="[26]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[14a]"></a>tcp_close_shutdown</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_close_shutdown), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[14d]"></a>tcp_create_segment</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[155]"></a>tcp_listen_input</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[148]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lwiplib.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[15a]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_oos_insert_segment &rArr; pbuf_realloc &rArr; mem_trim &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[158]"></a>tcp_output_alloc_header</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15c]"></a>tcp_output_segment</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; pbuf_header
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[159]"></a>tcp_parseopt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[15d]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[156]"></a>tcp_process</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[15e]"></a>tcp_receive</STRONG> (Thumb, 1616 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[154]"></a>tcp_timewait_input</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[27]"></a>tcpip_tcp_timer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwiplib.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwiplib.o(i.tcp_timer_needed)
<LI> lwiplib.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[28]"></a>tcpip_thread</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lwiplib.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[168]"></a>tivaif_hwinit</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lwiplib.o(i.tivaif_hwinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tivaif_hwinit &rArr; InitDMADescriptors &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxEnable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACRxEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACPHYRead
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACIntStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACIntEnable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACIntClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACFrameFilterSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACAddrGet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDMADescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_init
</UL>

<P><STRONG><a name="[171]"></a>tivaif_process_transmit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwiplib.o(i.tivaif_process_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tivaif_process_transmit &rArr; pbuf_free &rArr; mem_free &rArr; sys_arch_sem_wait &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_interrupt
</UL>

<P><STRONG><a name="[172]"></a>tivaif_receive</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, lwiplib.o(i.tivaif_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tivaif_receive &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tivaif_interrupt
</UL>

<P><STRONG><a name="[2a]"></a>tivaif_transmit</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, lwiplib.o(i.tivaif_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tivaif_transmit &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMACTxDMAPollDemand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tivaif_init)
</UL>
<P><STRONG><a name="[23]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[134]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[135]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[138]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[11]"></a>ControlTask</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, spider_task.o(i.ControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ControlTask &rArr; CreateSpider &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCallbackSet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTouchCollide
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateSpider
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spider_task.o(i.SpiderTaskInit)
</UL>
<P><STRONG><a name="[a]"></a>ControlTouchCallback</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, spider_task.o(i.ControlTouchCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ControlTouchCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spider_task.o(i.ControlTask)
</UL>
<P><STRONG><a name="[47]"></a>CreateSpider</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spider_task.o(i.CreateSpider))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CreateSpider &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTaskInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[93]"></a>SpiderCollide</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, spider_task.o(i.SpiderCollide))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiderCollide
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderTask
</UL>

<P><STRONG><a name="[b]"></a>SpiderTask</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, spider_task.o(i.SpiderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiderTask &rArr; DisplayImage &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiderCollide
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomSeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spider_task.o(i.CreateSpider)
</UL>
<P><STRONG><a name="[46]"></a>SpiderTouchCollide</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, spider_task.o(i.SpiderTouchCollide))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiderTouchCollide
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlTask
</UL>

<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[12f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2d]"></a>prvIdleTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = prvIdleTask &rArr;  prvIdleTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[17c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[99]"></a>TouchScreenDebouncer</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, touch.o(i.TouchScreenDebouncer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TouchScreenDebouncer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenIntHandler
</UL>

<P><STRONG><a name="[6c]"></a>InternalImageDraw</STRONG> (Thumb, 890 bytes, Stack size 120 bytes, image.o(i.InternalImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = InternalImageDraw &rArr; PixelTransparentDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PixelTransparentDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrImageDraw
</UL>

<P><STRONG><a name="[73]"></a>PixelTransparentDraw</STRONG> (Thumb, 662 bytes, Stack size 80 bytes, image.o(i.PixelTransparentDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PixelTransparentDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalImageDraw
</UL>

<P><STRONG><a name="[69]"></a>UpdateContextCharMapping</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, string.o(i.UpdateContextCharMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateContextCharMapping
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextFontSet
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
